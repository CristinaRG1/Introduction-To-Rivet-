// -*- C++ -*-
#include "Rivet/Analysis.hh"
#include "Rivet/Projections/FinalState.hh"
#include "Rivet/Projections/FastJets.hh"
#include "Rivet/Projections/DressedLeptons.hh"
#include "Rivet/Projections/MissingMomentum.hh"
#include "Rivet/Projections/DirectFinalState.hh"
#include "Rivet/Projections/ChargedFinalState.hh"

namespace Rivet {

  /// @brief Add a short analysis description here
  class myanalysis_check : public Analysis {
  public:

    /// Constructor
    RIVET_DEFAULT_ANALYSIS_CTOR(myanalysis_check);

    /// @name Analysis methods
    ///@{

    /// Book histograms and initialise projections
    // before the run
    void init() {
      // Initialise and register projections
      const ChargedFinalState cfs;
      declare(cfs, "FS");

      book(_h["eta"], "eta", 50, -6.0, 6.0);
      book(_h["rap"], "rap", 50, -6.0, 6.0);
      book(_Nevt_after_cuts, "TMP/Nevt_After_cuts");
    }

    /// Perform the per-event analysis
    void analyze(const Event& event) {
      const FinalState& fs = apply<FinalState>(event, "FS");
      for(const Particle &p : fs.particles()) {
        const double energy = p.E();
        const double TransversMomentum = p.pT();
        double pseudorapidity = p.eta();
        double rapidity = p.rapidity();
        cout << " Enegy, pt " << energy << " " << 
        TransversMomentum << endl;
        _h["eta"]->fill(pseudorapidity); 
        _h["rap"]->fill(rapidity);
      }
      _Nevt_after_cuts->fill();
    }

    /// Normalise histograms etc., after the run
    void finalize() {
      cout << "Nevt" << dbl(*_Nevt_after_cuts) << endl;
      scale(_h["eta"], 1.0/ *_Nevt_after_cuts);
      scale(_h["rap"], 1.0/ *_Nevt_after_cuts);
    }

    ///@}
  };
}

